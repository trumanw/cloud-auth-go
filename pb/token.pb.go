// Code generated by protoc-gen-go.
// source: pb/token.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TokenRetrievedEvent struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *TokenRetrievedEvent) Reset()                    { *m = TokenRetrievedEvent{} }
func (m *TokenRetrievedEvent) String() string            { return proto.CompactTextString(m) }
func (*TokenRetrievedEvent) ProtoMessage()               {}
func (*TokenRetrievedEvent) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *TokenRetrievedEvent) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type Token struct {
	AccessToken  string `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	TokenType    string `protobuf:"bytes,2,opt,name=token_type,json=tokenType" json:"token_type,omitempty"`
	ExpiresIn    uint64 `protobuf:"varint,3,opt,name=expires_in,json=expiresIn" json:"expires_in,omitempty"`
	RefreshToken string `protobuf:"bytes,4,opt,name=refresh_token,json=refreshToken" json:"refresh_token,omitempty"`
	Scope        string `protobuf:"bytes,5,opt,name=scope" json:"scope,omitempty"`
	State        string `protobuf:"bytes,6,opt,name=state" json:"state,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Token) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *Token) GetTokenType() string {
	if m != nil {
		return m.TokenType
	}
	return ""
}

func (m *Token) GetExpiresIn() uint64 {
	if m != nil {
		return m.ExpiresIn
	}
	return 0
}

func (m *Token) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *Token) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *Token) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func init() {
	proto.RegisterType((*TokenRetrievedEvent)(nil), "pb.TokenRetrievedEvent")
	proto.RegisterType((*Token)(nil), "pb.Token")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TokenService service

type TokenServiceClient interface {
	RetrieveToken(ctx context.Context, in *TokenRetrievedEvent, opts ...grpc.CallOption) (*Token, error)
}

type tokenServiceClient struct {
	cc *grpc.ClientConn
}

func NewTokenServiceClient(cc *grpc.ClientConn) TokenServiceClient {
	return &tokenServiceClient{cc}
}

func (c *tokenServiceClient) RetrieveToken(ctx context.Context, in *TokenRetrievedEvent, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := grpc.Invoke(ctx, "/pb.TokenService/RetrieveToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TokenService service

type TokenServiceServer interface {
	RetrieveToken(context.Context, *TokenRetrievedEvent) (*Token, error)
}

func RegisterTokenServiceServer(s *grpc.Server, srv TokenServiceServer) {
	s.RegisterService(&_TokenService_serviceDesc, srv)
}

func _TokenService_RetrieveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRetrievedEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).RetrieveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TokenService/RetrieveToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).RetrieveToken(ctx, req.(*TokenRetrievedEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _TokenService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TokenService",
	HandlerType: (*TokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveToken",
			Handler:    _TokenService_RetrieveToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/token.proto",
}

func init() { proto.RegisterFile("pb/token.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4a, 0xc4, 0x30,
	0x14, 0x86, 0xe9, 0xd8, 0x0e, 0xf4, 0xd9, 0x2a, 0x44, 0xc5, 0x32, 0x28, 0x8c, 0x75, 0x33, 0x6e,
	0x5a, 0xd0, 0x33, 0xb8, 0xd0, 0x65, 0x9d, 0x95, 0x9b, 0x92, 0x76, 0x9e, 0x63, 0x50, 0x92, 0x90,
	0x64, 0x8a, 0x83, 0xb8, 0xf1, 0x0a, 0x9e, 0xc6, 0x73, 0x78, 0x05, 0x0f, 0x22, 0x7d, 0x89, 0xae,
	0xdc, 0xe5, 0x7d, 0xff, 0xff, 0xde, 0x4f, 0x7e, 0xd8, 0xd3, 0x5d, 0xed, 0xd4, 0x13, 0xca, 0x4a,
	0x1b, 0xe5, 0x14, 0x9b, 0xe8, 0x6e, 0x76, 0xb2, 0x56, 0x6a, 0xfd, 0x8c, 0x35, 0xd7, 0xa2, 0xe6,
	0x52, 0x2a, 0xc7, 0x9d, 0x50, 0xd2, 0x7a, 0x47, 0x79, 0x01, 0x07, 0xcb, 0x71, 0xa1, 0x41, 0x67,
	0x04, 0x0e, 0xb8, 0xba, 0x1e, 0x50, 0x3a, 0xc6, 0x20, 0xde, 0x6c, 0xc4, 0xaa, 0x88, 0xe6, 0xd1,
	0x22, 0x6d, 0xe8, 0x5d, 0x7e, 0x46, 0x90, 0x90, 0x97, 0x9d, 0x41, 0xc6, 0xfb, 0x1e, 0xad, 0x6d,
	0x29, 0x2c, 0xb8, 0x76, 0x3d, 0xf3, 0x96, 0x53, 0x00, 0xd2, 0x5a, 0xb7, 0xd5, 0x58, 0x4c, 0xc8,
	0x90, 0x12, 0x59, 0x6e, 0x35, 0x8e, 0x32, 0xbe, 0x68, 0x61, 0xd0, 0xb6, 0x42, 0x16, 0x3b, 0xf3,
	0x68, 0x11, 0x37, 0x69, 0x20, 0x37, 0x92, 0x9d, 0x43, 0x6e, 0xf0, 0xc1, 0xa0, 0x7d, 0x0c, 0x09,
	0x31, 0x1d, 0xc8, 0x02, 0xf4, 0x11, 0x87, 0x90, 0xd8, 0x5e, 0x69, 0x2c, 0x12, 0x12, 0xfd, 0x40,
	0xd4, 0x71, 0x87, 0xc5, 0x34, 0xd0, 0x71, 0xb8, 0xbc, 0x87, 0x8c, 0x96, 0xee, 0xd0, 0x0c, 0xa2,
	0x47, 0x76, 0x0b, 0xf9, 0xef, 0x8f, 0xfd, 0xb1, 0xe3, 0x4a, 0x77, 0xd5, 0x3f, 0x4d, 0xcc, 0xd2,
	0x3f, 0xa1, 0x3c, 0x7a, 0xff, 0xfa, 0xfe, 0x98, 0xec, 0xb3, 0xdc, 0x77, 0x5c, 0xbf, 0x8e, 0xb5,
	0xbc, 0x75, 0x53, 0x6a, 0xf2, 0xea, 0x27, 0x00, 0x00, 0xff, 0xff, 0x27, 0x2e, 0x40, 0x58, 0x7d,
	0x01, 0x00, 0x00,
}
